package com.liutao62.leetcode.leetcode.editor.cn;

//ÂØπÈìæË°®ËøõË°åÊèíÂÖ•ÊéíÂ∫è„ÄÇ 
//
// 
//ÊèíÂÖ•ÊéíÂ∫èÁöÑÂä®ÁîªÊºîÁ§∫Â¶Ç‰∏ä„ÄÇ‰ªéÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†ÂºÄÂßãÔºåËØ•ÈìæË°®ÂèØ‰ª•Ë¢´ËÆ§‰∏∫Â∑≤ÁªèÈÉ®ÂàÜÊéíÂ∫èÔºàÁî®ÈªëËâ≤Ë°®Á§∫Ôºâ„ÄÇ 
//ÊØèÊ¨°Ëø≠‰ª£Êó∂Ôºå‰ªéËæìÂÖ•Êï∞ÊçÆ‰∏≠ÁßªÈô§‰∏Ä‰∏™ÂÖÉÁ¥†ÔºàÁî®Á∫¢Ëâ≤Ë°®Á§∫ÔºâÔºåÂπ∂ÂéüÂú∞Â∞ÜÂÖ∂ÊèíÂÖ•Âà∞Â∑≤ÊéíÂ•ΩÂ∫èÁöÑÈìæË°®‰∏≠„ÄÇ 
//
// 
//
// ÊèíÂÖ•ÊéíÂ∫èÁÆóÊ≥ïÔºö 
//
// 
// ÊèíÂÖ•ÊéíÂ∫èÊòØËø≠‰ª£ÁöÑÔºåÊØèÊ¨°Âè™ÁßªÂä®‰∏Ä‰∏™ÂÖÉÁ¥†ÔºåÁõ¥Âà∞ÊâÄÊúâÂÖÉÁ¥†ÂèØ‰ª•ÂΩ¢Êàê‰∏Ä‰∏™ÊúâÂ∫èÁöÑËæìÂá∫ÂàóË°®„ÄÇ 
// ÊØèÊ¨°Ëø≠‰ª£‰∏≠ÔºåÊèíÂÖ•ÊéíÂ∫èÂè™‰ªéËæìÂÖ•Êï∞ÊçÆ‰∏≠ÁßªÈô§‰∏Ä‰∏™ÂæÖÊéíÂ∫èÁöÑÂÖÉÁ¥†ÔºåÊâæÂà∞ÂÆÉÂú®Â∫èÂàó‰∏≠ÈÄÇÂΩìÁöÑ‰ΩçÁΩÆÔºåÂπ∂Â∞ÜÂÖ∂ÊèíÂÖ•„ÄÇ 
// ÈáçÂ§çÁõ¥Âà∞ÊâÄÊúâËæìÂÖ•Êï∞ÊçÆÊèíÂÖ•ÂÆå‰∏∫Ê≠¢„ÄÇ 
// 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// ËæìÂÖ•: 4->2->1->3
//ËæìÂá∫: 1->2->3->4
// 
//
// Á§∫‰æã 2Ôºö 
//
// ËæìÂÖ•: -1->5->3->4->0
//ËæìÂá∫: -1->0->3->4->5
// 
// Related Topics ÊéíÂ∫è ÈìæË°® 
// üëç 207 üëé 0

import com.liutao62.leetcode.ListNode;

import java.util.LinkedList;

public class InsertionSortList {
    public static void main(String[] args) {
        Solution solution = new InsertionSortList().new Solution();
        ListNode head = new ListNode(4);
        ListNode cur = head;
        cur.next = new ListNode(1);
        cur = cur.next;
        cur.next = new ListNode(3);
        cur = cur.next;
        cur.next = new ListNode(2);
        ListNode listNode = solution.insertionSortList(head);
        System.out.println("");
    }
    //leetcode submit region begin(Prohibit modification and deletion)

    /**
     * Definition for singly-linked list.
     * public class ListNode {
     * int val;
     * ListNode next;
     * ListNode(int x) { val = x; }
     * }
     */
    class Solution {
        public ListNode insertionSortList(ListNode head) {
            if (head == null) {
                return null;
            }
            LinkedList<ListNode> stack = new LinkedList<>();
            ListNode cur = head;
            while (cur != null) {
                pushAndSort(stack, cur);
                cur = cur.next;
            }
            for (int i = 0; i < stack.size() - 1; i++) {
                stack.get(i).next = stack.get(i + 1);
            }
            stack.peekLast().next = null;
            return stack.getFirst();
        }

        private void pushAndSort(LinkedList<ListNode> stack, ListNode node) {
            ListNode last = stack.peekLast();
            if (last != null && last.val > node.val) {
                stack.removeLast();
                pushAndSort(stack, node);
                stack.addLast(last);
            } else {
                stack.addLast(node);
            }
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}
